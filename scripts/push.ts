import { Options } from "@layerzerolabs/lz-v2-utilities";
import { task } from "hardhat/config";
import { encodeAbiParameters, parseAbiParameters } from "viem";

const updateFeed =
  "0x504e41550100000003b801000000040d006fe182c26c2158c6b8920038831b956525a8b5deb12e3171ae0508fa73a0224a2fc4eb6340db65357440c12aced5021e945db3dad6dd33812a38a337ddc1ec9001023638ba2b239ca4bc7d92fc21bcab12cd991cc286ac783fd6b8ab15891846a267058d25a1c1ea3588c0169cd76545b2cc0065e3bfd08947c1b63013ff591ee640010361b815ea536883854192bdbf14473f1a2d28b674f5dff9c4ee9e81f987f7e4d366b37156c51a14b4310e500cb4548236bcd622bb96f33c08373858df5309060f0104926206e9e5b740efd0807417c22e5b94c496fbbd0c104c45e52ce3e0facd4b385ae7ed5e19e86778d3835faad2a0a9a08ea8440083146ad3fd43e680f902393600067c9dc5e5702b1e058a8262ea4985d9b4769f9f16320767cb90c74781436873652472773a0cd0ede70fe9478f69324e9728a0f2d51d91170d225c4341a09138dc0108bac9ad852a1d55cfe0b10d98cb88266edc4f1711c2450fd637a62b0b885d094a6fd6a77884dcfd37eab2ba8adae762613df9d75428135c9452bf5f7e9cf87783000a9cd379091cd9634fd1100d541a9b31e8c31251518a25f8cd5a8a53f9d74adad030b74c46d2270957491eb20bd56f92a7cf4152f8916d4d158c92859f8f760ad3000b8da5a1698942c68cda285c961ebcc7a1ee23931ec6d98968424c28c1954a731911e990d9799ffbdd9af59c6c0f5b067e627328495e588caad1b9f7331403a73d000c7e3d425d6ae34b8ee42374b213017dadb3e50eae56595de3e6dd07f99a5c3718535801fdf23a4fb13ad5c317364fb22844f9f5507d098231a3fec4861db03a3b010daedc219f49e585b9cb3f28ee42491eb14263a25e68f6d3c4e9acd0c8aca3cd4642ed079b2a0b7942b4e01147b76e264167fabe062477a0f03a2738d2f8674b13010f0688ac88ebde5e52417e9d08381a698a3f162fa350a89a493077b9eb6269f2de2ef8332d1d8c7194e1b47e2ef9073a3c7a8f32e77fb31ec6277e94ca2f87a34e0110165e271fd3e5fddb2483da523a776c179c0c50c6b99f2d99e53b2ea6198ee15a22e0e1f363900f6edd66a0184acd1daa32b4cb8cb9e4ab76a3581d84961c2d4a00120cee0e8971156e561063fb4e05d809cf63b79d581fb5ded52c1fc0b325d72e771ab34c7c968a55235174e4b837fcc568911b664fe0ed56c429fb1f680f78691d006692f00b00000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000004182c15014155575600000000000922b02400002710867f2fe765a1cceafb56b622751aeb4efb8688e302005500e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b4300000556ddf3bfbf00000000ce7400b8fffffff8000000006692f00b000000006692f00a0000055535519ca000000000cc49f0a80b203e1a7ea909c82385bdad7448a5178529c540cd29cca9a3f39e70261952d9953c9b2a5e0bdc6332d937e8e296f4056622de4f4fbeaf8d8ec21cad2ceb7a1255b92f350c2a12cf045fba708ac328b6207fc5dc7381f690a6be6ff04ab913fb8d0f2bb5a4ed326c74b7f39109cc8143b4b878b6d6f19205cdc8a8ff333650e3aa8a1b5328b9ff6c85b7e50cb19a566a73c73944aa3fc9aa7801a3b861321fdf55953e5fc56d140573fcd9584e702cb598fc9deb6f8b788c2131d1f88afebde95f9d8fe4d02262822409ee7d7e3ba4d1166c89bd6e9a74cff3fecc48d7005500ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace00000049b348c59c000000000d6bd3a3fffffff8000000006692f00b000000006692f00a000000499d9091b0000000000d2dd8b10b94589c3cbc01d742e638b3099b511db9f02020c8357db951a46d2251d28a2db19f7c0c8ba63316efb38c9c8d202fad90d2fcbcbb7796b0199b8612d574f79a136bfc689b7877380afcc4390b1891f52bb9256e94ea328a96099512a67bb44c25b3271255c81320927574bd66e401aab34ad99f4ca649af5fccaba8347ec0e767de95800aa728856b2d316dad7c3e0f65100fd71bc76504ad0264637511ebaa03c474b04a77c1a152e3210c93501071ef6ac3a857325c9418f6e33bd84043996cb38f5710c7ba276f09ee7d7e3ba4d1166c89bd6e9a74cff3fecc48d7";

task("push", "pushes the readAndSend")
  .addParam("contract", "Name of the contract to interact peer with.")
  .addParam("address", "The address of the contract")
  .addParam("params", "The params for readandsend")

  .setAction(async (args, { viem }) => {
    const contract = await viem.getContractAt(args.contract, args.address);
    // Endpoint ID, contract address on the other chain
    const options = Options.newOptions()
      .addExecutorLzReceiveOption(65000, 0)
      .toHex();

    // const tx0 = await (contract.write as any).updateFeeds([[updateFeed]], {value: 100000000})
    // console.log(tx0)

    const prices = await (contract.read as any).read();

    console.log(prices);
    const data = encodeAbiParameters(
      [
        { type: "uint256", name: "" },
        { type: "uint256[]", name: "" },
      ],
      [1n, prices]
    );

    const quote = await (contract.read as any).quote([data, options, false]);
    console.log(Number(quote.nativeFee) / 10 ** 18);

    const tx = await (contract.write as any).readAndSend(
      [[updateFeed], options],
      { value: 90071992547409910n }
    );
    console.log(tx);
  });
